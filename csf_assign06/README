Lucy Zhang, Ajay Ananthakrishnan
wzhang99@jhu.edu, ajayananth@jhu.edu

Assignment 6 Contributions

Lucy Zhang: wrote manual review of synchronization, wrote extra credit part (semaphore + select)
Ajaykarthik Ananthakrishnan: wrote thread starter function, handled synchronization by adding mutex locks

Manual review of synchronization:
We made the calculator instance's shared data (variables map) safe by using a pthread_mutex_t object as a private field of the Calc struct and using it to lock the critical section. We determined the critical section as the function evalExpr and the helper functions it uses (basically calc_eval) so we locked the mutex at the beginning of this evalExpr function and unlocked it at the end before we return the returnVal. Thus, the mutex lock guarantees that only one thread is allowed to execute this function at a time and the variables map would not be mutated by multiple threads at once. If a thread is already in the function and is possibly modifying the shared data, another thread trying to execute this function will wait until the previous thread finishes with the function and releases the mutex.
For the extra credit (shutdown), we made a global volatile variable "shutdown_request" and a global variable semaphore "threads" initialized to the maximum number of allowed threads. In main, we use the select function to periodically check if the shutdown is requested by any threads. We also use the sem_wait when we first accept and create a thread and do sem_post when the thread is done so that the total number of threads won't exceed the maximum. When shutdown is requested, we close the server socket so that no new client connection will be accepted. We call sem_wait as many times as the maximum number of threads to ensure all threads are done. Then we destroy the Calc object and semaphore to avoid memory leak.